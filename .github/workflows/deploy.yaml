name: CI/CD pipeline RealEstate

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: üöÄ Deploy app
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üìù Create .env.prod for backend
        run: |
          mkdir -p backend
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > backend/.env.prod
          echo "DEBUG=False" >> backend/.env.prod
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> backend/.env.prod
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> backend/.env.prod
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> backend/.env.prod
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> backend/.env.prod
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> backend/.env.prod

      - name: üìù Create .env.prod for frontend (Vite)
        run: |
          mkdir -p frontend
          echo "VITE_API_BASE_URL=/realestate/api/" > frontend/.env.prod

      - name: üß± Build Vite frontend
        run: |
          cd frontend
          npm cache clean --force || true # Utiliser || true pour √©viter que l'√©tape √©choue si le cache est vide
          rm -rf node_modules || true # S'assurer que √ßa ne bloque pas si le dossier n'existe pas
          npm install
          npm run build # Vite construit dans 'dist' par d√©faut

      - name: üîí Correct permissions for dist on CI runner
        run: |
          sudo chmod -R 755 frontend/dist

      - name: üßπ Clean old project files/folders on VPS
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            sudo rm -rf ${{ secrets.VPS_APP_PATH }}/backend/.env.prod
            sudo rm -rf ${{ secrets.VPS_APP_PATH }}/frontend/dist

      - name: üì§ Upload backend .env.prod to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          source: "backend/.env.prod"
          target: "${{ secrets.VPS_APP_PATH }}/backend/"

      - name: üì§ Upload frontend dist to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          source: "frontend/dist"
          target: "${{ secrets.VPS_APP_PATH }}/frontend/"

      - name: üì§ Transfer all project files to VPS using rsync
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            sudo mkdir -p ${{ secrets.VPS_APP_PATH }}
            sudo chown -R ${{ secrets.VPS_USER }}:${{ secrets.VPS_USER }} ${{ secrets.VPS_APP_PATH }}
            sudo chmod -R 755 ${{ secrets.VPS_APP_PATH }}

            cd ${{ github.workspace }}

            cd ${{ secrets.VPS_APP_PATH }}


            rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
              ./backend/ ./backend/
            rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
              ./frontend/ ./frontend/
            rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
              ./nginx_realestate/ ./nginx_realestate/
            
            rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
              ./docker-compose.prod.yaml ./docker-compose.prod.yaml
            rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
              ./init.sql ./init.sql
            
            echo "All files successfully transfered."
          
      - name: üîê SSH to VPS & deploy
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            cd ${{ secrets.VPS_APP_PATH }}
            mkdir -p backend frontend nginx_realestate
            docker compose -f docker-compose.prod.yaml down --remove-orphans || true
            docker compose -f docker-compose.prod.yaml up -d --build
            docker image prune -f
            docker compose -f docker-compose.prod.yaml exec -T backend python manage.py migrate --noinput
            docker compose -f docker-compose.prod.yaml exec -T backend python manage.py collectstatic --noinput
            echo "Success deploy !" # Message de fin de d√©ploiement Docker

      - name: üîÅ Reload Nginx on VPS
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            sudo systemctl reload nginx