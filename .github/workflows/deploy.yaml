name: CI/CD pipeline RealEstate

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: üöÄ Deploy app
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üìù Create .env.prod for backend
        run: |
          mkdir -p backend
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > backend/.env.prod
          echo "DEBUG=False" >> backend/.env.prod
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> backend/.env.prod
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> backend/.env.prod
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> backend/.env.prod
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> backend/.env.prod
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> backend/.env.prod

      - name: üìù Create .env.prod for frontend (Vite)
        run: |
          mkdir -p frontend
          echo "VITE_API_BASE_URL=/realestate/api/" > frontend/.env.prod

      - name: üß± Build Vite frontend
        run: |
          cd frontend
          npm cache clean --force || true
          rm -rf node_modules || true
          npm install
          npm run build

      - name: üîí Correct permissions for dist on CI runner
        run: |
          sudo chmod -R 755 frontend/dist

      - name: Set up SSH for rsync/ssh-action
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_KEY }}
          no-cache: true

      - name: üìÅ Create base project directories on VPS
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            sudo mkdir -p ${{ secrets.VPS_APP_PATH }}/backend
            sudo mkdir -p ${{ secrets.VPS_APP_PATH }}/frontend/dist # Cr√©e aussi dist car on l'uploadera
            sudo mkdir -p ${{ secrets.VPS_APP_PATH }}/nginx_realestate
            sudo chown -R ${{ secrets.VPS_USER }}:${{ secrets.VPS_USER }} ${{ secrets.VPS_APP_PATH }}
            sudo chmod -R 755 ${{ secrets.VPS_APP_PATH }}

      - name: üì§ Transfer all project files to VPS using rsync
        run: |
          rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./backend/ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_APP_PATH }}/backend/
          
          rsync -avz --delete \
            ./frontend/ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_APP_PATH }}/frontend/

          
          rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./nginx_realestate/ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_APP_PATH }}/nginx_realestate/
          
          rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./docker-compose.prod.yaml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_APP_PATH }}/docker-compose.prod.yaml
          
          rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./init.sql ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_APP_PATH }}/init.sql

      - name: üßπ Clean specific old files on VPS
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            echo "Nettoyage manuel si n√©cessaire."

      - name: üîê SSH to VPS & deploy
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            cd ${{ secrets.VPS_APP_PATH }} # Navigue vers la racine du projet sur le VPS

            docker compose -f docker-compose.prod.yaml down --remove-orphans || true
            docker compose -f docker-compose.prod.yaml up -d --build

            docker image prune -f

            docker compose -f docker-compose.prod.yaml exec -T backend python manage.py migrate --noinput
            docker compose -f docker-compose.prod.yaml exec -T backend python manage.py collectstatic --noinput

            echo "Success deploy !"

      - name: üîÅ Reload Nginx on VPS
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          script: |
            sudo systemctl reload nginx